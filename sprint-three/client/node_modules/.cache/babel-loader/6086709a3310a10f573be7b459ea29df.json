{"ast":null,"code":"//Timestamp Converter\n// const dateConvert = (date) => {\n//   let seconds = Math.floor((new Date() - date) / 1000);\n//   let intervalType; // placeholder for type of interval - year, month, day, hour, etc.\n//   let interval = Math.floor(seconds / 31536000);\n//   if (interval >= 1) {\n//     intervalType = \"year\"; // check if more than 1 year have passed\n//   } else {\n//     interval = Math.floor(seconds / 2592000);\n//     if (interval >= 1) {\n//       intervalType = \"month\"; // check if more than 1 month have passed\n//     } else {\n//       interval = Math.floor(seconds / 86400);\n//       if (interval >= 1) {\n//         intervalType = \"day\"; // check if more than 1 day have passed\n//       } else {\n//         interval = Math.floor(seconds / 3600);\n//         if (interval >= 1) {\n//           intervalType = \"hour\"; // check if more than 1 hour have passed\n//         } else {\n//           interval = Math.floor(seconds / 60);\n//           if (interval >= 1) {\n//             intervalType = \"minute\"; // check if more than 1 minute have passed\n//           } else {\n//             if (interval === 0) {\n//               interval = seconds;\n//               intervalType = \"second\";\n//             }\n//           }\n//         }\n//       }\n//     }\n//   }\n//   if (interval > 1 || interval === 0) {\n//     intervalType += \"s\";\n//   }\n//   return `${interval} ${intervalType} ago`;\n// };\n// const dateConvert = response.data[i].timestamp;\n// let dateObject = new Date(dateConvert);\n// let formattedDate =\n//     dateObject.getMonth() +\n//     1 +\n//     \"/\" +\n//     dateObject.getDate() +\n//     \"/\" +\n//     dateObject.getFullYear();\nconst dateConvert = response.data[i].timestamp;\nlet dateObject = new Date(dateConvert);\nlet formattedDate = dateObject.getMonth() + 1 + \"/\" + dateObject.getDate() + \"/\" + dateObject.getFullYear();\nexport default dateConvert;","map":{"version":3,"sources":["/Users/Steven/Desktop/BrainStation/Activities, Exercises and Projects/Brainflix/steven-martins-brainflix/sprint-two/src/components/Date.js"],"names":["dateConvert","response","data","i","timestamp","dateObject","Date","formattedDate","getMonth","getDate","getFullYear"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAMA,WAAW,GAAGC,QAAQ,CAACC,IAAT,CAAcC,CAAd,EAAiBC,SAArC;AACA,IAAIC,UAAU,GAAG,IAAIC,IAAJ,CAASN,WAAT,CAAjB;AACA,IAAIO,aAAa,GACfF,UAAU,CAACG,QAAX,KACA,CADA,GAEA,GAFA,GAGAH,UAAU,CAACI,OAAX,EAHA,GAIA,GAJA,GAKAJ,UAAU,CAACK,WAAX,EANF;AAQA,eAAeV,WAAf","sourcesContent":["//Timestamp Converter\n\n// const dateConvert = (date) => {\n//   let seconds = Math.floor((new Date() - date) / 1000);\n//   let intervalType; // placeholder for type of interval - year, month, day, hour, etc.\n//   let interval = Math.floor(seconds / 31536000);\n//   if (interval >= 1) {\n//     intervalType = \"year\"; // check if more than 1 year have passed\n//   } else {\n//     interval = Math.floor(seconds / 2592000);\n//     if (interval >= 1) {\n//       intervalType = \"month\"; // check if more than 1 month have passed\n//     } else {\n//       interval = Math.floor(seconds / 86400);\n//       if (interval >= 1) {\n//         intervalType = \"day\"; // check if more than 1 day have passed\n//       } else {\n//         interval = Math.floor(seconds / 3600);\n//         if (interval >= 1) {\n//           intervalType = \"hour\"; // check if more than 1 hour have passed\n//         } else {\n//           interval = Math.floor(seconds / 60);\n//           if (interval >= 1) {\n//             intervalType = \"minute\"; // check if more than 1 minute have passed\n//           } else {\n//             if (interval === 0) {\n//               interval = seconds;\n//               intervalType = \"second\";\n//             }\n//           }\n//         }\n//       }\n//     }\n//   }\n\n//   if (interval > 1 || interval === 0) {\n//     intervalType += \"s\";\n//   }\n//   return `${interval} ${intervalType} ago`;\n// };\n\n// const dateConvert = response.data[i].timestamp;\n// let dateObject = new Date(dateConvert);\n// let formattedDate =\n//     dateObject.getMonth() +\n//     1 +\n//     \"/\" +\n//     dateObject.getDate() +\n//     \"/\" +\n//     dateObject.getFullYear();\n\nconst dateConvert = response.data[i].timestamp;\nlet dateObject = new Date(dateConvert);\nlet formattedDate =\n  dateObject.getMonth() +\n  1 +\n  \"/\" +\n  dateObject.getDate() +\n  \"/\" +\n  dateObject.getFullYear();\n\nexport default dateConvert;\n"]},"metadata":{},"sourceType":"module"}